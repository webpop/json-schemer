// Generated by CoffeeScript 1.3.3
(function() {
  var JsonArray, JsonErrors, JsonInteger, JsonNumber, JsonObject, JsonProperty, JsonSchema, JsonString, e,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  JsonErrors = (function() {

    function JsonErrors() {
      this.base = [];
      this.attr = {};
    }

    JsonErrors.prototype.add = function(property, error) {
      if (!(property || error)) {
        return;
      }
      if (!(error != null)) {
        error = property;
        property = null;
      }
      if (property) {
        if (error instanceof JsonErrors) {
          return this._mergeErrors(property, error);
        } else {
          return this._addError(property, error);
        }
      } else {
        return this.base.push(error);
      }
    };

    JsonErrors.prototype.addToBase = function(error) {
      return this.add(error);
    };

    JsonErrors.prototype.on = function(property) {
      if (property) {
        return this.attr[property];
      } else {
        return this.base;
      }
    };

    JsonErrors.prototype.onBase = function() {
      return this.on();
    };

    JsonErrors.prototype.all = function() {
      var base, err, key;
      base = this.base.length ? [["", this.base]] : [];
      return base.concat((function() {
        var _ref, _results;
        _ref = this.attr;
        _results = [];
        for (key in _ref) {
          err = _ref[key];
          _results.push([key, err]);
        }
        return _results;
      }).call(this));
    };

    JsonErrors.prototype.isEmpty = function() {
      return this.base.length === 0 && Object.keys(this.attr).length === 0;
    };

    JsonErrors.prototype._addError = function(property, error) {
      var _base;
      (_base = this.attr)[property] || (_base[property] = []);
      if (error.length) {
        return this.attr[property] = this.attr[property].concat(error);
      } else {
        return this.attr[property].push(error);
      }
    };

    JsonErrors.prototype._mergeErrors = function(property, errors) {
      var err, newProp, prop, _i, _len, _ref, _ref1, _results;
      if (errors.isEmpty()) {
        return;
      }
      _ref = errors.all();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], prop = _ref1[0], err = _ref1[1];
        newProp = prop ? "" + property + "." + prop : property;
        _results.push(this.add(newProp, err));
      }
      return _results;
    };

    return JsonErrors;

  })();

  JsonProperty = (function() {

    function JsonProperty(attr) {
      this.attr = attr;
    }

    JsonProperty.prototype.cast = function(val, cb) {
      return cb(null, val);
    };

    JsonProperty.prototype.errors = function(val, cb) {
      var errors;
      errors = new JsonErrors;
      if (!this.validate("required", function(r) {
        return !(r && typeof val === "undefined");
      })) {
        errors.add("required");
      }
      return cb(null, errors);
    };

    JsonProperty.prototype.process = function(val, cb) {
      var valCb,
        _this = this;
      valCb = val != null ? this.cast : function(val, cb) {
        return cb(null, this.attr["default"]);
      };
      return valCb.call(this, val, function(err, val) {
        if (err) {
          return cb(err);
        }
        return _this.errors(val, function(err, errors) {
          if (err) {
            return cb(err);
          }
          return cb(null, {
            valid: errors.isEmpty(),
            doc: val,
            errors: errors
          });
        });
      });
    };

    JsonProperty.prototype.validate = function(attr, fn) {
      if ((attr in this.attr) && this.attr[attr] !== null) {
        return fn.call(this, this.attr[attr]);
      } else {
        return true;
      }
    };

    return JsonProperty;

  })();

  JsonString = (function(_super) {

    __extends(JsonString, _super);

    function JsonString() {
      return JsonString.__super__.constructor.apply(this, arguments);
    }

    JsonString.prototype.cast = function(val, cb) {
      switch (this.attr.format) {
        case "date":
        case "date-time":
          return cb(null, new Date(val));
        default:
          return cb(null, val.toString());
      }
    };

    JsonString.prototype.errors = function(val, cb) {
      var _this = this;
      return JsonString.__super__.errors.call(this, val, function(err, errors) {
        if (err) {
          return cb(err);
        }
        if (val != null) {
          if (!_this.validate("minLength", function(len) {
            return val.length >= len;
          })) {
            errors.add("minLength");
          }
          if (!_this.validate("maxLength", function(len) {
            return val.length <= len;
          })) {
            errors.add("maxLength");
          }
          if (!_this.validate("pattern", function(pat) {
            return new RegExp(pat).test(val);
          })) {
            errors.add("pattern");
          }
          if (!_this.validate("enum", function(opts) {
            return __indexOf.call(opts, val) >= 0;
          })) {
            errors.add("enum");
          }
          if (!_this.validate("format", function(format) {
            return this.validFormat(format, val);
          })) {
            errors.add("format");
          }
        }
        return cb(null, errors);
      });
    };

    JsonString.prototype.validFormat = function(format, val) {
      switch (this.attr.format) {
        case "date":
          return /^\d\d\d\d-\d\d-\d\d$/.test(val);
        case "date-time":
          return /^\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\dZ$/.test(val);
        default:
          return true;
      }
    };

    return JsonString;

  })(JsonProperty);

  JsonNumber = (function(_super) {

    __extends(JsonNumber, _super);

    function JsonNumber() {
      return JsonNumber.__super__.constructor.apply(this, arguments);
    }

    JsonNumber.prototype.cast = function(val, cb) {
      val = parseFloat(val);
      return cb(null, isNaN(val) ? null : val);
    };

    JsonNumber.prototype.errors = function(val, cb) {
      var _this = this;
      return JsonNumber.__super__.errors.call(this, val, function(err, errors) {
        if (err) {
          return cb(err);
        }
        if (val != null) {
          if (!_this.validate("minimum", function(min) {
            if (this.attr.excludeMinimum) {
              return val > min;
            } else {
              return val >= min;
            }
          })) {
            errors.add("minimum");
          }
          if (!_this.validate("maximum", function(max) {
            if (this.attr.excludeMaximum) {
              return val < max;
            } else {
              return val <= max;
            }
          })) {
            errors.add("maximum");
          }
          if (!_this.validate("divisibleBy", function(div) {
            return val % div === 0;
          })) {
            errors.add("divisibleBy");
          }
        }
        return cb(null, errors);
      });
    };

    return JsonNumber;

  })(JsonProperty);

  JsonInteger = (function(_super) {

    __extends(JsonInteger, _super);

    function JsonInteger() {
      return JsonInteger.__super__.constructor.apply(this, arguments);
    }

    JsonInteger.prototype.cast = function(val, cb) {
      val = parseInt(val, 10);
      return cb(null, isNaN(val) ? null : val);
    };

    return JsonInteger;

  })(JsonNumber);

  JsonArray = (function(_super) {

    __extends(JsonArray, _super);

    function JsonArray() {
      return JsonArray.__super__.constructor.apply(this, arguments);
    }

    JsonArray.prototype.cast = function(val, cb) {
      return this.itemSchema(function(err, schema) {
        var count, index, item, items, _i, _len, _results,
          _this = this;
        console.log("Got itemSchema %o", schema);
        if (!schema) {
          return cb(null, (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = val.length; _i < _len; _i++) {
              item = val[_i];
              _results.push(item);
            }
            return _results;
          })());
        }
        items = [];
        count = val.length;
        _results = [];
        for (index = _i = 0, _len = val.length; _i < _len; index = ++_i) {
          item = val[index];
          _results.push((function(item, index) {
            return schema.cast(item, function(err, itemVal) {
              if (err) {
                cb(err);
                return cb = function() {};
              }
              items[index] = itemVal;
              if (--count === 0) {
                return cb(null, items);
              }
            });
          })(item, index));
        }
        return _results;
      });
    };

    JsonArray.prototype.errors = function(val, cb) {
      var _this = this;
      return JsonArray.__super__.errors.call(this, val, function(err, errors) {
        if (val != null) {
          if (!_this.validate("minItems", function(min) {
            return val.length >= min;
          })) {
            errors.add("minItems");
          }
          if (!_this.validate("maxItems", function(max) {
            return val.length <= max;
          })) {
            errors.add("maxItems");
          }
          return _this.itemSchema(function(err, schema) {
            var count, i, item, _i, _len, _results;
            if (!schema) {
              return cb(null, errors);
            }
            count = val.length;
            _results = [];
            for (i = _i = 0, _len = val.length; _i < _len; i = ++_i) {
              item = val[i];
              _results.push((function(item, i) {
                return schema.errors(item, function(err, itemErrors) {
                  if (err) {
                    cb(err);
                    return cb = function() {};
                  }
                  errors.add("" + i, itemErrors);
                  if (--count === 0) {
                    return cb(null, errors);
                  }
                });
              })(item, i));
            }
            return _results;
          });
        }
      });
    };

    JsonArray.prototype.itemSchema = function(cb) {
      var _this = this;
      if (!this.attr.items) {
        return cb(null, null);
      }
      if (this.attr.items["$ref"]) {
        if (this._itemSchema) {
          return cb(null, this._itemSchema);
        }
        return JsonSchema.resolver(this.attr.items["$ref"], this, function(err, schema) {
          if (err) {
            return cb(err);
          }
          _this._itemSchema = schema;
          return cb(null, schema);
        });
      } else {
        return cb(null, JsonProperty["for"](this.attr.items));
      }
    };

    return JsonArray;

  })(JsonProperty);

  JsonObject = (function(_super) {

    __extends(JsonObject, _super);

    function JsonObject(attr) {
      this.attr = attr;
      this.properties = attr.properties;
    }

    JsonObject.prototype.cast = function(val, cb) {
      var _this = this;
      return this.refSchema(function(err, schema) {
        var attrs, count, key, obj, _ref, _results;
        if (err) {
          return cb(err);
        }
        if (schema) {
          return schema.cast(val, cb);
        }
        obj = {};
        count = Object.keys(_this.properties).length;
        _ref = _this.properties;
        _results = [];
        for (key in _ref) {
          attrs = _ref[key];
          _results.push((function(key, attrs) {
            var caster;
            caster = val && (key in val) ? JsonProperty["for"](attrs) : {
              cast: function(_, cb) {
                return cb(null, attrs["default"]);
              }
            };
            return caster.cast(val[key], function(err, castedVal) {
              if (err) {
                cb(err);
                return cb = function() {};
              }
              obj[key] = castedVal;
              if (--count === 0) {
                return cb(null, obj);
              }
            });
          })(key, attrs));
        }
        return _results;
      });
    };

    JsonObject.prototype.process = function(val, cb) {
      var _this = this;
      return this.refSchema(function(err, schema) {
        if (err) {
          return cb(err);
        }
        if (schema) {
          return schema.process(val, cb);
        } else {
          return JsonObject.__super__.process.call(_this, val, cb);
        }
      });
    };

    JsonObject.prototype.errors = function(val, cb) {
      var _this = this;
      if (val == null) {
        return JsonObject.__super__.errors.call(this, val, cb);
      }
      return this.refSchema(function(err, schema) {
        if (err) {
          return cb(err);
        }
        if (schema) {
          return schema.errors(val, cb);
        }
        return JsonObject.__super__.errors.call(_this, val, function(err, errors) {
          var attrs, count, key, _ref, _results;
          if (err) {
            return cb(err);
          }
          count = Object.keys(_this.properties).length;
          _ref = _this.properties;
          _results = [];
          for (key in _ref) {
            attrs = _ref[key];
            _results.push((function(key, attrs) {
              return JsonProperty["for"](attrs).errors(val && val[key], function(err, propErrors) {
                if (err) {
                  cb(err);
                  return cb = function() {};
                }
                errors.add(key, propErrors);
                if (--count === 0) {
                  return cb(null, errors);
                }
              });
            })(key, attrs));
          }
          return _results;
        });
      });
    };

    JsonObject.prototype.refSchema = function(cb) {
      var _this = this;
      if (this._refSchema) {
        return cb(null, this._refSchema);
      }
      if (this.properties["$ref"]) {
        return JsonSchema.resolver(this.properties["$ref"].replace(/#.+$/, ''), this, function(err, schema) {
          if (err) {
            return cb(err);
          }
          _this._refSchema = schema;
          return cb(null, schema);
        });
      } else {
        return cb(null, null);
      }
    };

    return JsonObject;

  })(JsonProperty);

  JsonProperty["for"] = function(attr) {
    var klass, type;
    type = attr.type || "any";
    klass = {
      "any": JsonProperty,
      "string": JsonString,
      "number": JsonNumber,
      "integer": JsonInteger,
      "array": JsonArray,
      "object": JsonObject
    }[type];
    if (!klass) {
      throw "Bad Schema - Unknown property type " + type;
    }
    return new klass(attr);
  };

  JsonSchema = (function(_super) {

    __extends(JsonSchema, _super);

    function JsonSchema(attr) {
      if (attr.type !== "object") {
        throw "The main schema must be of type \"object\"";
      }
      JsonSchema.__super__.constructor.call(this, attr);
    }

    return JsonSchema;

  })(JsonObject);

  JsonSchema.resolver = function(url, schema, cb) {
    if (!JsonSchema.resolver) {
      throw "No resolver defined for references";
    }
  };

  e = ((typeof exports !== "undefined" && exports !== null) && exports) || ((typeof window !== "undefined" && window !== null) && window);

  e.JsonSchema = JsonSchema;

  e.JsonErrors = JsonErrors;

}).call(this);
